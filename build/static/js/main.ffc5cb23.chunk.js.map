{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Pomodoro","props","sessionClickUp","state","sessionLength","setState","sessionTime","sessionClickDown","breakClickUp","breakLength","breakTime","breakClickDown","countDown","session","document","getElementById","play","handleStart","running","clearInterval","start","setInterval","reset","load","className","length","this","handleClickUp","handleClickDown","sessionRemaining","breakRemaining","React","Component","Session","id","onClick","Break","Time","remaining","Math","floor","toLocaleString","undefined","minimumIntegerDigits","src","type","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ffc5cb23.chunk.js","sourcesContent":["import React from 'react';\n//import logo from './logo.svg';\nimport './App.css';\n/*\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n*/\n\nfunction App() {\n  return (\n    <Pomodoro />\n  )\n}\nclass Pomodoro extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      session: true,\n      sessionLength: 25,\n      breakLength: 5,\n      sessionTime: 1500,\n      breakTime: 300,\n      running: false,\n      start: null\n    }\n  };\n  sessionClickUp = () => {\n    if(this.state.sessionLength < 60) {\n      this.setState({\n        sessionLength: this.state.sessionLength + 1,\n        sessionTime: (this.state.sessionLength+1)*60\n      })\n    }\n  };\n  sessionClickDown = () => {\n    if(this.state.sessionLength > 1) {\n      this.setState({\n        sessionLength: this.state.sessionLength - 1,\n        sessionTime: (this.state.sessionLength-1)*60\n      })\n    }\n  };\n  breakClickUp = () => {\n    if(this.state.breakLength < 60) {\n      this.setState({\n        breakLength: this.state.breakLength + 1,\n        breakTime: (this.state.breakLength+1)*60\n      })\n    }\n  };\n  breakClickDown = () => {\n    if(this.state.breakLength > 1) {\n      this.setState({\n        breakLength: this.state.breakLength - 1,\n        breakTime: (this.state.breakLength-1)*60\n      });\n    };\n  };\n\n  countDown = () => {\n    if (this.state.session) {\n      if(this.state.sessionTime > 0) {\n        this.setState({\n          sessionTime: this.state.sessionTime -1\n        })\n      } else {\n        document.getElementById('beep').play();\n        this.setState({\n          session: false,\n          sessionTime: this.state.sessionLength * 60\n        })\n      }\n    } else {\n      if(this.state.breakTime > 0) {\n        this.setState({\n          breakTime: this.state.breakTime -1\n        })\n      } else {\n        document.getElementById('beep').play();\n        this.setState({\n          session: true,\n          breakTime: this.state.breakLength * 60\n        })\n      }\n    }\n  };\n  handleStart = () => {\n    if (this.state.running) {\n      this.setState({\n        running: false,\n      });\n      clearInterval(this.state.start);\n    } else {\n      let start = setInterval(this.countDown, 1000);\n      this.setState({\n        running: true,\n        start: start\n      })\n    }\n  };\n  reset = () => {\n    clearInterval(this.state.start);\n    document.getElementById('beep').load();\n    this.setState({\n      session: true,\n      breakLength: 5,\n      sessionLength: 25,\n      sessionTime: 1500,\n      breakTime: 300,\n      running: false\n    })\n  }\n\n render() {\n   return(\n     <div className=\"wrapper\">\n       <Session length={this.state.sessionLength}\n         handleClickUp={this.sessionClickUp}\n         handleClickDown={this.sessionClickDown}/>\n       <Break length={this.state.breakLength}\n         handleClickUp={this.breakClickUp}\n         handleClickDown={this.breakClickDown}/>\n       <Time session={this.state.session}\n         sessionRemaining={this.state.sessionTime}\n         breakRemaining={this.state.breakTime}\n         handleStart={this.handleStart}\n         reset={this.reset}/>\n     </div>\n   )\n }\n}\n\nconst Session = (props) => {\n  return (\n    <div id=\"task\" className='box'>\n      <h2 id='session-label'>Session Length</h2>\n      <h3 id='session-length'>{props.length}</h3>\n      <button id='session-increment' onClick={props.handleClickUp}>UP</button>\n      <button id='session-decrement' onClick={props.handleClickDown}>DOWN</button>\n    </div>\n  )\n}\n\nconst Break = (props) => {\n  return (\n    <div id='break' className='box'>\n      <h2 id='break-label'>Break Length</h2>\n      <h3 id='break-length'>{props.length}</h3>\n      <button id='break-increment' onClick={props.handleClickUp}>UP</button>\n      <button id='break-decrement' onClick={props.handleClickDown}>DOWN</button>\n    </div>\n  )\n}\n\nconst Time = (props) => {\n  let session = '';\n  let remaining = 0;\n  if (props.session) {\n    session = 'Session';\n    remaining = props.sessionRemaining\n  } else {\n    session = 'Break'\n    remaining = props.breakRemaining\n  }\n  return (\n    <div id='time' className='box'>\n      <h2 id='timer-label'>{session}</h2>\n      <h3 id=\"time-left\">{Math.floor(remaining/60).toLocaleString(undefined, {minimumIntegerDigits: 2}) + ':' + (remaining%60).toLocaleString(undefined, {minimumIntegerDigits: 2})}</h3>\n      <button id='start_stop' onClick={props.handleStart}>Start / Stop </button>\n      <button id='reset'\n        onClick={props.reset}\n        >Reset</button>\n      <audio id='beep'>\n        <source src='http://soundbible.com/mp3/submarine-diving-alarm-daniel_simon.mp3' type='audio/mpeg'/>\n      </audio>\n    </div>\n  )\n}\n\nexport default App\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('base'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}